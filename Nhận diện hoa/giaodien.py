# =============================
# 7. T·∫†O GIAO DI·ªÜN KI·ªÇM TH·ª¨
# =============================
# C√†i ƒë·∫∑t th∆∞ vi·ªán Gradio n·∫øu ch∆∞a c√≥
!pip install gradio -q

import gradio as gr
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img

# --- C√ÅC TH√îNG S·ªê C·∫¶N THI·∫æT ---
# T·∫£i l·∫°i m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán t·ªët nh·∫•t
try:
    model = load_model('/content/drive/MyDrive/final_model.h5')
    print("‚úÖ T·∫£i m√¥ h√¨nh 'final_model.h5' th√†nh c√¥ng!")
except Exception as e:
    print(f"L·ªói: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ hu·∫•n luy·ªán v√† l∆∞u file 'final_model.h5' v√†o Google Drive. Chi ti·∫øt l·ªói: {e}")
    # D·ª´ng th·ª±c thi n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c model
    model = None

# Danh s√°ch c√°c l·ªõp hoa (PH·∫¢I ƒê√öNG TH·ª® T·ª∞ NH∆Ø KHI HU·∫§N LUY·ªÜN)
class_names = ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']
img_size = (64, 64)

# --- H√ÄM D·ª∞ ƒêO√ÅN ---
# H√†m n√†y s·∫Ω x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
def predict_flower(image):
    if model is None:
        return {"L·ªói": 1.0}
        
    # 1. Ti·ªÅn x·ª≠ l√Ω ·∫£nh gi·ªëng h·ªát nh∆∞ khi hu·∫•n luy·ªán
    # Resize ·∫£nh v·ªÅ ƒë√∫ng k√≠ch th∆∞·ªõc
    img_resized = tf.image.resize(image, img_size)
    
    # Chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ [0, 1]
    img_normalized = img_resized / 255.0
    
    # M·ªü r·ªông chi·ªÅu ƒë·ªÉ t·∫°o th√†nh m·ªôt "batch" ch·ª©a 1 ·∫£nh duy nh·∫•t
    # K√≠ch th∆∞·ªõc t·ª´ (64, 64, 3) -> (1, 64, 64, 3)
    img_batch = np.expand_dims(img_normalized, axis=0)
    
    # 2. Th·ª±c hi·ªán d·ª± ƒëo√°n
    predictions = model.predict(img_batch)
    
    # 3. X·ª≠ l√Ω k·∫øt qu·∫£ ƒë·∫ßu ra
    # predictions[0] l√† m·∫£ng x√°c su·∫•t cho c√°c l·ªõp, v√≠ d·ª•: [0.1, 0.05, 0.8, 0.02, 0.03]
    # T·∫°o m·ªôt dictionary ƒë·ªÉ Gradio hi·ªÉn th·ªã t√™n l·ªõp v√† x√°c su·∫•t t∆∞∆°ng ·ª©ng
    scores = {class_names[i]: float(predictions[0][i]) for i in range(len(class_names))}
    
    return scores

# --- KH·ªûI T·∫†O GIAO DI·ªÜN ---
if model is not None:
    demo = gr.Interface(
        fn=predict_flower,
        inputs=gr.Image(label="T·∫£i ·∫£nh hoa c·ªßa b·∫°n l√™n ƒë√¢y"),
        outputs=gr.Label(num_top_classes=3, label="K·∫øt qu·∫£ d·ª± ƒëo√°n"),
        title="ü§ñ Nh·∫≠n d·∫°ng 5 lo√†i hoa",
        description="ƒê√¢y l√† giao di·ªán ƒë·ªÉ ki·ªÉm th·ª≠ m√¥ h√¨nh ANN ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán. H√£y t·∫£i l√™n ·∫£nh c·ªßa m·ªôt trong 5 lo√†i hoa: c√∫c h·ªça mi (daisy), b·ªì c√¥ng anh (dandelion), hoa h·ªìng (roses), hoa h∆∞·ªõng d∆∞∆°ng (sunflowers), ho·∫∑c tulip.",
        examples=[
            ["/content/dataset/daisy/5547758_eea9edfd54_n.jpg"],
            ["/content/dataset/roses/12240303_80d87f77a3_n.jpg"],
            ["/content/dataset/tulips/11242940_d53b524741.jpg"]
        ]
    )
    
    # Ch·∫°y giao di·ªán
    demo.launch(debug=True)